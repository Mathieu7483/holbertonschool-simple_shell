.TH HSH 1 "August 19 2025" "hsh" "Custom Version of shell" "Simple_Shell Manpage"
.SH NAME
HSH \- our version of Simple Shell

.SH PROLOG
.B This manual page is part of the POSIX Programmer's Manual.  The
Linux implementation of this interface may differ (consult the
corresponding Linux manual page for details of Linux behavior), or
the interface may not be implemented on Linux.

.SH SYNOPSIS
.B #include """simple_shell.h"""
.B int Simple_Shell(const char *format, ...);
.br
Runs an interactive prompt.
.br
Also supports non\-interactive mode when commands are piped into stdin.

.SH DESCRIPTION
.B hsh
is a minimal educational shell. On each loop iteration:
.IP "1." 3
Displays the prompt "cisfun$ " (even if input is not a TTY).
.IP "2." 3
Reads a line from stdin with
.BR getline (3).
.IP "3." 3
Tokenizes the line into arguments separated by spaces (using
.BR strtok (3)).
.IP "4." 3
If the command is a builtin (currently: \fBexit\fR), it executes internally.
.IP "5." 3
Otherwise, resolves the command path:
if the string contains a '/', it is executed directly with
.BR execve (2);
otherwise the directories in
.B PATH
are searched using
.BR stat (2).
.IP "6." 3
Creates a child process with
.BR fork (2),
executes the command in the child with
.BR execve (2),
and the parent waits with
.BR wait (2)/waitpid(2).
.PP
At end of file (Ctrl\-D), the shell prints a newline and exits.

.SH FEATURES
.IP "\[bu]" 2
Prompt \fBcisfun$\fR.
.IP "\[bu]"
Safe input with \fBgetline\fR.
.IP "\[bu]"
Simple tokenization (space\-separated arguments).
.IP "\[bu]"
PATH resolution (or execution via absolute/relative path).
.IP "\[bu]"
Execution via \fBfork + execve\fR and synchronization with \fBwait\fR.
.IP "\[bu]"
Builtin \fBexit\fR.

.SH BUILTINS
.TP
.B exit
Exit the shell. (Custom exit codes are not yet implemented.)

.SH COMMAND SEARCH
If \fBargv[0]\fR contains a '/', \fBhsh\fR attempts
.BR execve (2)
directly on that path.  
Otherwise, \fBhsh\fR duplicates \fB$PATH\fR, splits it by ':',
and for each directory builds \fIdir\fR/\fIcommand\fR.
It checks with
.BR stat (2)
whether the file exists and is executable (\fBS_IXUSR\fR).
The first match is executed.  
If no match is found, \fBhsh\fR prints to \fBstderr\fR:
“\fB./hsh: 1: <cmd>: not found\fR”.

.SH EXECUTION
The parent creates a child with \fBfork\fR.  
In the child: \fBexecve(full_path, args, environ)\fR. On error,
an error message is printed and the child exits with \fBEXIT_FAILURE\fR.  
The parent calls \fBwait\fR/\fBwaitpid\fR to collect the exit status.

.SH ENVIRONMENT
\fBhsh\fR passes the current environment to executed programs.  
Relevant variables:
.TP
.B PATH
Colon\-separated list of directories used to locate executables.
.TP
.B HOME
Would be used for a builtin \fBcd\fR (not implemented).
.TP
.B LANG, LC_*
May affect output of executed programs.

.SH EXIT STATUS
The shell itself returns \fBEXIT_SUCCESS\fR.  
Child process exit codes are collected but not exposed as \fB$?\fR.  
If a command is not found, an error is printed; typically such cases
would exit with code 127.

.SH LIMITATIONS
.IP "\[bu]" 2
No handling of quotes, escape sequences, or comments.
.IP "\[bu]"
No redirections (\fB>\fR, \fB<\fR), no pipes (\fB|\fR), no logical operators
(\fB&&\fR, \fB||\fR), no command chaining (\fB;\fR).
.IP "\[bu]"
Naive tokenization: split only by spaces.
.IP "\[bu]"
Fixed argument array size (\fB256\fR).
.IP "\[bu]"
Prompt is displayed even in non\-interactive mode (no \fBisatty\fR check).
.IP "\[bu]"
No builtins besides \fBexit\fR (\fBcd, env, setenv, unsetenv\fR not implemented).
.IP "\[bu]"
Requires \fBPATH\fR to be set; otherwise only absolute/relative commands work.

.SH EXAMPLES
Typical session:
.PP
.nf
\fB$ ./hsh
cisfun$ /bin/echo hello
hello
cisfun$ ls -l            \fR# after PATH resolution\fB
...
cisfun$ exit
\fR
.fi

.SH FILES
No configuration files. Reads exclusively from \fBstdin\fR.

.SH BUGS
This shell is educational and minimal; see LIMITATIONS.

.SH AUTHORS
Mathieu, Mathis, Heytem
